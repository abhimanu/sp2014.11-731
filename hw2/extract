#!/usr/bin/env python

import argparse
import json
import os, sys, math

TRUNCLEN = 3

def extract_features(hyp, ref):
  hwords = hyp.lower().split()
  rwords = ref.lower().split()
  refset = set(rwords)
  trunc_hyp = [word[:TRUNCLEN] for word in hwords]
  trunc_ref = [word[:TRUNCLEN] for word in rwords]
  precision = sum(1.0 for word in hwords if word in refset) / len(hwords)
#  recall = sum(1.0 for word in hwords if word in refset) / len(rwords)
  recall = sum(1.0 for word in hwords if word in rwords)*1.0/ len(rwords)
  recall_trunc = sum(1.0 for word in trunc_hyp if word in trunc_ref)*1.0/ len(rwords)

#  return {'prec':precision, 'recall':recall}
  recall = recall*0.5+0.5*recall_trunc 
  match=0
  for i in xrange(0,len(ref)):
	  if i>=len(hyp):
		  break
	  if hyp[i]==ref[i]:
		  match+=1
	  else:
		  break
  full_match = match/len(ref)
  return {'recall':recall, 'match':full_match}

argparser = argparse.ArgumentParser(prog='extract')
argparser.add_argument('-x', '--pairs', dest='pairs', default='data/en-cs.pairs', help='Reference-Hypothesis pairs')

args = argparser.parse_args()

lc = 0
sys.stderr.write('Extracting features for (ref,hyp) pairs from %s.\n' % args.pairs)
# loop over all (ref,hyp) pairs in the input file and extract evaluation features
for ref_hyp in open(args.pairs):
  lc += 1
  ref, hyp = ref_hyp.rstrip().split(' ||| ')
  fmap = extract_features(hyp, ref)
  print json.dumps(fmap)   # print evaluation feature map

