#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
import math
#from sets import Set

ITER=4
NULL="NULL"

optparser = optparse.OptionParser()
optparser.add_option("-b", "--bitext", dest="bitext", default="data/dev-test-train.de-en", help="Parallel corpus (default data/dev-test-train.de-en)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()

sys.stderr.write("Initializing with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair.split(' ||| ')] for pair in open(opts.bitext)][:opts.num_sents]
#print bitext
f_count = defaultdict(int)
e_count = defaultdict(int)
fe_count = defaultdict(int)

#print "loaded the sentences"

p_0 = 0.000005
lamda= 0.05

prior = {}
prior_sum=defaultdict(float)
tuple_sent={}
sent_dict = {}
for (n, (f, e)) in enumerate(bitext):
	f.append(NULL)
	l = len(f)
	m=len(e)
	sent_dict[n]=[]
	for f_i in set(f):
		f_count[f_i] += 1
		for e_j in set(e):
			fe_count[(f_i,e_j)] += 1
			sent_dict[n].append((e_j,f_i))
			tuple_sent[(e_j,f_i)]=n
#			if (n,f_i,e_j) in prior:
#				continue
#			if i==l:
#				prior[(n,f_i,e_j)]=p_0
#			else:
#				prior[(n,f_i,e_j)] = (1-p_0)*math.exp(-lamda*abs(j/m-i/l))
#			prior_sum[n] += prior[(n,f_i,e_j)]
	for e_j in set(e):
		e_count[e_j] += 1

#for (n, (f, e)) in enumerate(bitext):
#	for (i,f_i) in enumerate(f):
#		for (j,e_j) in enumerate(e):
#			prior[(n,f_i,e_j)] = prior[(n,f_i,e_j)]/prior_sum[n]

dice = defaultdict(float)
dice_sum = defaultdict(float)
for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
	dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
	dice_sum[e_j] += dice[(f_i,e_j)]


t_ef=defaultdict(float)
total={}
total_s=defaultdict(float)
ef_count = defaultdict(float)

w_e=set()
w_f=set()

for (n, (f,e)) in enumerate(bitext):
	for w in f:
		w_f.add(w)
	for w in e:
		w_e.add(w)
	w_f.add(NULL)

#	print "sentence ", n
sys.stderr.write( "len(w_e), len(w_f) %i,%i\n"%(len(w_e), len(w_f)))
#for e in w_e:
#	f_sum=0
#	for f in w_f:
#		t_ef[(e,f)]=dice[(f,e)]
#		f_sum += dice[(f,e)]
#	t_ef[(e,NULL)]=1.0/len(w_f)
#	f_sum += 1.0/len(w_f)
#	for f in w_f:
#		t_ef[(e,f)]=t_ef[(e,f)]/f_sum

#sent_dict = {}
#for (n, (f_s, e_s)) in enumerate(bitext):
#	sent_dict[n]={}
#	for e in e_s:
#		for f in f_s:
#			sent_dict[n].append((e,f))

for (k, (f, e)) in enumerate(dice.keys()):
	t_ef[(e,f)]=dice[(f,e)]/dice_sum[e]
	ef_count[(e,f)]=0
	total[f]=0

#print "done initializing"

for iterate in xrange(0,ITER):
#	print "in iteration,", iterate
#	for (f_s,e_s) in bitext:
#		f_s.append(NULL)
#		for f in f_s:
#			for e in e_s:
#				ef_count[(e,f)]=0
#			total[f]=0
	for (k, (e,f)) in enumerate(ef_count.keys()):
		ef_count[(e,f)]=0
		total[f]=0
	
#	for (f_s,e_s) in bitext:
	for (n, (f_s,e_s)) in enumerate(bitext):
		f_s.append(NULL)
		for e in e_s:
			total_s[e]=0
		for (e,f) in sent_dict[n]:
#			for f in f_s:
			total_s[e] += t_ef[(e,f)] #*prior[(n,f,e)]
#		for e in e_s:
#			for f in f_s:
		for (e,f) in sent_dict[n]:
			ef_count[(e,f)] += t_ef[(e,f)]/total_s[e]
			total[f] += t_ef[(e,f)]/total_s[e]
#	for (f_s,e_s) in bitext:
#		f_s.append(NULL)
#		for f in f_s:
#			for e in e_s:
	for (k, (e,f)) in enumerate(ef_count.keys()):
		t_ef[(e,f)] = ef_count[(e,f)]/total[f]
#		if t_ef[(e,f)] == 0 or math.log(t_ef[(e,f)]) <= -5:
#			del t_ef[(e,f)]
#			del ef_count[(e,f)]
#			if (e,f) in sent_dict[tuple_sent[(e,f)]]:
#				sent_dict[tuple_sent[(e,f)]].remove((e,f))

	sys.stderr.write(".")

for (f, e) in bitext:
	f.append(NULL)
	for (j, e_j) in enumerate(e):
		maxI=-1
		maxF=''
		for (i, f_i) in enumerate(f): 
			if maxI==-1 or t_ef[(e_j,f_i)] > t_ef[(e_j,maxF)]:
				maxI=i
				maxF=f_i
		if maxF != NULL :
			sys.stdout.write("%i-%i " % (maxI,j))
	sys.stdout.write("\n")


#for (n, (f, e)) in enumerate(bitext):
#  for f_i in set(f):
#    f_count[f_i] += 1
#    for e_j in set(e):
#      fe_count[(f_i,e_j)] += 1
#  for e_j in set(e):
#    e_count[e_j] += 1
#  if n % 500 == 0:
#    sys.stderr.write(".")
#
#dice = defaultdict(int)
#for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
#  dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
#  if k % 5000 == 0:
#    sys.stderr.write(".")
#sys.stderr.write("\n")
#
#for (f, e) in bitext:
#  for (i, f_i) in enumerate(f): 
#    for (j, e_j) in enumerate(e):
#      if dice[(f_i,e_j)] >= opts.threshold:
#        sys.stdout.write("%i-%i " % (i,j))
#  sys.stdout.write("\n")


